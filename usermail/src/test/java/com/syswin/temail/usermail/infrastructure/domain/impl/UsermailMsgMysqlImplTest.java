/* * MIT License * * Copyright (c) 2019 Syswin * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */package com.syswin.temail.usermail.infrastructure.domain.impl;import static org.assertj.core.api.Assertions.assertThat;import static org.mockito.Mockito.verify;import com.syswin.temail.usermail.common.Constants.TemailStatus;import com.syswin.temail.usermail.domains.UsermailDO;import com.syswin.temail.usermail.dto.RevertMailDTO;import com.syswin.temail.usermail.dto.TrashMailDTO;import com.syswin.temail.usermail.dto.UmQueryDTO;import com.syswin.temail.usermail.infrastructure.domain.mapper.UsermailMapper;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.ArgumentCaptor;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.MockitoJUnitRunner;@RunWith(MockitoJUnitRunner.class)public class UsermailMsgMysqlImplTest {  @InjectMocks  private UsermailMsgMysqlImpl usermailRepoImpl;  @Mock  private UsermailMapper usermailMapper;  @Test  public void saveUsermail() {    UsermailDO usermailDO = new UsermailDO();    ArgumentCaptor<UsermailDO> usermailDOCap = ArgumentCaptor.forClass(UsermailDO.class);    usermailRepoImpl.insertUsermail(usermailDO);    Mockito.verify(usermailMapper).insertUsermail(usermailDOCap.capture());    assertThat(usermailDOCap.getValue()).isEqualTo(usermailDO);  }  @Test  public void getUsermail() {    UmQueryDTO umQueryDTO = new UmQueryDTO();    ArgumentCaptor<UmQueryDTO> usermailDOCap = ArgumentCaptor.forClass(UmQueryDTO.class);    usermailRepoImpl.listUsermails(umQueryDTO);    Mockito.verify(usermailMapper).listUsermails(usermailDOCap.capture());    assertThat(usermailDOCap.getValue()).isEqualTo(umQueryDTO);  }  @Test  public void getUsermailByMsgid() {    String msgId = "msgId";    String owner = "owner";    ArgumentCaptor<String> msgIdCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    usermailRepoImpl.selectByMsgidAndOwner(msgId,owner);    Mockito.verify(usermailMapper).selectByMsgidAndOwner(msgIdCap.capture(),ownerCap.capture());    assertThat(msgIdCap.getValue()).isEqualTo(msgId);    assertThat(ownerCap.getValue()).isEqualTo(owner);  }  @Test  public void getLastUsermail() {    UmQueryDTO umQueryDto = new UmQueryDTO();    ArgumentCaptor<UmQueryDTO> umQueryDtoCap = ArgumentCaptor.forClass(UmQueryDTO.class);    usermailRepoImpl.listLastUsermails(umQueryDto);    Mockito.verify(usermailMapper).listLastUsermails(umQueryDtoCap.capture());    assertThat(umQueryDtoCap.getValue()).isEqualTo(umQueryDto);  }  @Test  public void revertUsermail() {    RevertMailDTO revertMailDTO = new RevertMailDTO();    ArgumentCaptor<RevertMailDTO> revertMailDTOCap = ArgumentCaptor.forClass(RevertMailDTO.class);    usermailRepoImpl.countRevertUsermail(revertMailDTO);    Mockito.verify(usermailMapper).countRevertUsermail(revertMailDTOCap.capture());    assertThat(revertMailDTOCap.getValue()).isEqualTo(revertMailDTO);  }  @Test  public void removeMsg() {    List<String> msgIds = new ArrayList<String>();    String owner = "owner";    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<List<String>> msgIdsCap = ArgumentCaptor.forClass(ArrayList.class);    usermailRepoImpl.deleteMsg(msgIds, owner);    Mockito.verify(usermailMapper).deleteMsg(msgIdsCap.capture(),ownerCap.capture());    assertThat(ownerCap.getValue()).isEqualTo(owner);    assertThat(msgIdsCap.getValue()).isEqualTo(msgIds);  }  @Test  public void destroyAfterRead() {    String owner = "owner";    String msgid = "msgid";    int status = TemailStatus.STATUS_DESTROY_AFTER_READ_2;    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<String> msgIdCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<Integer> statusCap = ArgumentCaptor.forClass(Integer.class);    usermailRepoImpl.updateDestroyAfterReadStatus(owner, msgid, status);    Mockito.verify(usermailMapper).updateDestroyAfterReadStatus(ownerCap.capture(),msgIdCap.capture(),statusCap.capture());    assertThat(ownerCap.getValue()).isEqualTo(owner);    assertThat(msgIdCap.getValue()).isEqualTo(msgid);    assertThat(statusCap.getValue()).isEqualTo(status);  }  @Test  public void batchDeleteBySessionId() {    String sessionId = "sessionId";    String owner = "owner";    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<String> sessionIdCap = ArgumentCaptor.forClass(String.class);    usermailRepoImpl.deleteBySessionIdAndOwner(sessionId, owner);    Mockito.verify(usermailMapper).deleteBySessionIdAndOwner(sessionIdCap.capture(),ownerCap.capture());    assertThat(sessionIdCap.getValue()).isEqualTo(sessionId);    assertThat(ownerCap.getValue()).isEqualTo(owner);  }  @Test  public void getUsermailListByMsgid() {    String msgid = "msgid";    ArgumentCaptor<String> msgidCap = ArgumentCaptor.forClass(String.class);    usermailRepoImpl.listUsermailsByMsgid(msgid);    Mockito.verify(usermailMapper).listUsermailsByMsgid(msgidCap.capture());    assertThat(msgidCap.getValue()).isEqualTo(msgid);  }  @Test  public void getUsermailByFromToMsgIds() {    String from = "from";    List<String> msgIds = new ArrayList<String>();    ArgumentCaptor<String> fromCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<List> msgIdsCap = ArgumentCaptor.forClass(ArrayList.class);    usermailRepoImpl.listUsermailsByFromToMsgIds(from,msgIds);    Mockito.verify(usermailMapper).listUsermailsByFromToMsgIds(fromCap.capture(),msgIdsCap.capture());    assertThat(fromCap.getValue()).isEqualTo(from);    assertThat(msgIdsCap.getValue()).isEqualTo(msgIds);  }  @Test  public void updateReplyCountAndLastReplyMsgid() {    String msgid = "msgid";    String owner = "owner";    int count = 1;    String lastReplyMsgid = "lastReplyMsgid";    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<String> msgIdCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<String> lastReplyMsgidCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<Integer> countCap = ArgumentCaptor.forClass(Integer.class);    usermailRepoImpl.updateReplyCountAndLastReplyMsgid(msgid, owner, count, lastReplyMsgid);    Mockito.verify(usermailMapper).updateReplyCountAndLastReplyMsgid(msgIdCap.capture(),ownerCap.capture(),countCap.capture(),lastReplyMsgidCap.capture());    assertThat(msgIdCap.getValue()).isEqualTo(msgid);    assertThat(ownerCap.getValue()).isEqualTo(owner);    assertThat(countCap.getValue()).isEqualTo(count);    assertThat(lastReplyMsgidCap.getValue()).isEqualTo(lastReplyMsgid);  }  @Test  public void updateStatusByMsgIds() {    List<String> msgIds = new ArrayList<String>();    String owner = "owner";    int status = 0;    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<List<String>> msgIdsCap = ArgumentCaptor.forClass(ArrayList.class);    ArgumentCaptor<Integer> statueCap = ArgumentCaptor.forClass(Integer.class);    usermailRepoImpl.updateStatusByMsgIds(msgIds, owner, status);    Mockito.verify(usermailMapper).updateStatusByMsgIds(msgIdsCap.capture(),ownerCap.capture(),statueCap.capture());    assertThat(msgIdsCap.getValue()).isEqualTo(msgIds);    assertThat(ownerCap.getValue()).isEqualTo(owner);    assertThat(statueCap.getValue()).isEqualTo(status);  }  @Test  public void removeMsgByStatus() {    List<TrashMailDTO> trashMails = new ArrayList<TrashMailDTO>();    String owner = "owner";    int status = TemailStatus.STATUS_NORMAL_0;    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<List<TrashMailDTO>> trashMailsCap = ArgumentCaptor.forClass(ArrayList.class);    ArgumentCaptor<Integer> statueCap = ArgumentCaptor.forClass(Integer.class);    usermailRepoImpl.deleteMsgByStatus(trashMails,owner,status);    Mockito.verify(usermailMapper).deleteMsgByStatus(trashMailsCap.capture(),ownerCap.capture(),statueCap.capture());    assertThat(trashMailsCap.getValue()).isEqualTo(trashMails);    assertThat(ownerCap.getValue()).isEqualTo(owner);    assertThat(statueCap.getValue()).isEqualTo(status);  }  @Test  public void revertMsgFromTrash() {    List<TrashMailDTO> trashMails = new ArrayList<TrashMailDTO>();    String owner = "owner";    int status = TemailStatus.STATUS_NORMAL_0;    int originStatus = TemailStatus.STATUS_TRASH_4;    ArgumentCaptor<String> ownerCap = ArgumentCaptor.forClass(String.class);    ArgumentCaptor<List<TrashMailDTO>> trashMailsCap = ArgumentCaptor.forClass(ArrayList.class);    ArgumentCaptor<Integer> statusCap = ArgumentCaptor.forClass(Integer.class);    ArgumentCaptor<Integer> originStatusCap = ArgumentCaptor.forClass(Integer.class);    usermailRepoImpl.updateRevertMsgFromTrashStatus(trashMails,owner,status);    Mockito.verify(usermailMapper).updateRevertMsgFromTrashStatus(trashMailsCap.capture(),ownerCap.capture(),statusCap.capture(),originStatusCap.capture());    assertThat(trashMailsCap.getValue()).isEqualTo(trashMails);    assertThat(ownerCap.getValue()).isEqualTo(owner);    assertThat(statusCap.getValue()).isEqualTo(status);    assertThat(originStatusCap.getValue()).isEqualTo(originStatus);  }  @Test  public void deleteMsgLessThanTest() {    int batchNum = 100;    int count = 100;    LocalDate createTime = LocalDate.now();    Mockito.when(usermailMapper.deleteUseMsgLessThan(createTime, batchNum)).thenReturn(count);    int result = usermailRepoImpl.deleteMsgLessThan(createTime, batchNum);    assertThat(result).isEqualTo(count);  }  @Test  public void removeDomainTest() {    String domain = "domain";    int pageSize = 5;    usermailRepoImpl.deleteDomain(domain, pageSize);    verify(usermailMapper).deleteDomain(domain, pageSize);  }}